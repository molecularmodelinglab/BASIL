name: Build and Release

on:
  pull_request:
    branches:
      - dev
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x86, x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UPX
        run: choco install upx

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build application
        run: |
          poetry run python build.py --version ${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }} --tag-output --clean

      - name: Create Inno Setup script
        run: |
          $version = "${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}"
          $appFolder = "dist\BASIL-v$version"

          @"
          [Setup]
          AppName=BASIL
          AppVersion=$version
          AppPublisher=BASIL
          DefaultDirName={autopf}\BASIL
          DefaultGroupName=BASIL
          OutputDir=dist
          OutputBaseFilename=BASIL-setup-${{ matrix.architecture }}
          Compression=lzma2
          SolidCompression=yes
          ArchitecturesAllowed=${{ matrix.architecture == 'x64' && 'x64' || '' }}
          ArchitecturesInstallIn64BitMode=${{ matrix.architecture == 'x64' && 'x64' || '' }}

          [Files]
          Source: "$appFolder\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

          [Icons]
          Name: "{group}\BASIL"; Filename: "{app}\BASIL.exe"
          Name: "{autodesktop}\BASIL"; Filename: "{app}\BASIL.exe"; Tasks: desktopicon

          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
          "@ | Out-File -FilePath "setup.iss" -Encoding ASCII

      - name: Build Windows installer with Inno Setup
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "setup.iss"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.architecture }}
          path: dist/BASIL-setup-${{ matrix.architecture }}.exe

  build-macos-arm64:
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UPX
        run: brew install upx

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build ARM64 application
        env:
          MACOSX_DEPLOYMENT_TARGET: '11.0'
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          poetry run python build.py --version $VERSION --tag-output --clean --bundle-id com.basil.app

      - name: Remove Quarantine Attributes
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          xattr -cr "dist/BASIL-v${VERSION}.app" 2>/dev/null || true

      - name: Install DMG creator
        run: brew install create-dmg

      - name: Create ARM64 DMG
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}

          mkdir -p dist/dmg
          cp -a "dist/BASIL-v${VERSION}.app" dist/dmg/BASIL.app

          create-dmg \
            --volname "BASIL" \
            --no-internet-enable \
            "dist/BASIL-v${VERSION}-arm64.dmg" \
            "dist/dmg/"

      - name: Upload ARM64 DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: dist/*-arm64.dmg

  build-macos-intel:
    runs-on: macos-13
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UPX
        run: brew install upx

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build x86_64 application
        env:
          MACOSX_DEPLOYMENT_TARGET: '11.0'
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          poetry run python build.py --version $VERSION --tag-output --clean --bundle-id com.basil.app

      - name: Remove Quarantine Attributes
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          xattr -cr "dist/BASIL-v${VERSION}.app" 2>/dev/null || true

      - name: Install DMG creator
        run: brew install create-dmg

      - name: Create Intel DMG
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}

          mkdir -p dist/dmg
          cp -a "dist/BASIL-v${VERSION}.app" dist/dmg/BASIL.app

          create-dmg \
            --volname "BASIL" \
            --no-internet-enable \
            "dist/BASIL-v${VERSION}-intel.dmg" \
            "dist/dmg/"

      - name: Upload Intel DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-intel
          path: dist/*-intel.dmg

  build-linux:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libfuse2 \
            desktop-file-utils \
            file \
            upx \
            wget

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Install dependencies
        run: |
          poetry install

      - name: Force CPU-only PyTorch on Linux
        run: |
          poetry run pip install --index-url https://download.pytorch.org/whl/cpu \
            --upgrade --force-reinstall torch

      - name: Verify CPU-only build
        run: |
          poetry run python -c "import torch; print('Torch', torch.__version__, 'CUDA:', torch.version.cuda)"

      - name: Build Linux application
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          poetry run python build.py --version $VERSION --tag-output --clean

          echo "=== GLIBC requirement check ==="
          ldd "dist/BASIL-v${VERSION}/BASIL" | grep libc || true
          objdump -T "dist/BASIL-v${VERSION}/BASIL" | grep GLIBC | sort -u || true

      - name: Download AppImage tools
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: Create AppImage structure
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}

          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/lib
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

          cp -r dist/BASIL-v${VERSION}/* AppDir/usr/bin/

          echo "=== Looking for Python libraries ==="
          find AppDir/usr/bin -name "libpython*.so*" -exec cp {} AppDir/usr/lib/ \;
          find AppDir/usr/bin -name "*.so*" | head -20

          if [ -f assets/icons/icon.png ]; then
            cp assets/icons/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/basil.png
            cp assets/icons/icon.png AppDir/basil.png
          fi

          cat > AppDir/usr/share/applications/basil.desktop << 'EOF'
          [Desktop Entry]
          Name=BASIL
          Exec=BASIL
          Icon=basil
          Type=Application
          Categories=Science;Education;
          Terminal=false
          Comment=BASIL Application
          EOF

          cp AppDir/usr/share/applications/basil.desktop AppDir/basil.desktop

          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${HERE}/usr/bin:${HERE}/usr/bin/lib:${LD_LIBRARY_PATH}"
          export PATH="${HERE}/usr/bin:${PATH}"
          exec "${HERE}/usr/bin/BASIL" "$@"
          EOF
          chmod +x AppDir/AppRun
          chmod +x AppDir/usr/bin/BASIL

          echo "=== AppDir structure ==="
          ls -la AppDir/usr/lib/ || true
          ls -la AppDir/usr/bin/ | head -20

      - name: Build AppImage
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          ARCH=x86_64 ./appimagetool-x86_64.AppImage AppDir BASIL-v${VERSION}-x86_64.AppImage
          chmod +x BASIL-v${VERSION}-x86_64.AppImage

      - name: Verify AppImage
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          ls -lh BASIL-v${VERSION}-x86_64.AppImage
          file BASIL-v${VERSION}-x86_64.AppImage

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64
          path: BASIL-*.AppImage

  create-release:
    needs: [build-windows, build-macos-arm64, build-macos-intel, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded artifacts
        run: |
          find . -type f
          find . -type f -exec ls -lh {} \;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-x86/*.exe
            windows-x64/*.exe
            macos-arm64/*.dmg
            macos-intel/*.dmg
            linux-x86_64/*.AppImage
          body: |
            ## macOS Users
            - **Apple Silicon (M1/M2/M3/M4)**: Download `*-arm64.dmg`
            - **Intel**: Download `*-intel.dmg`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
