name: Build and Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x86, x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build application
        run: |
          poetry run python build.py --onefile --version ${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }} --tag-output

      - name: Create installer with InstallForge
        run: |
          # This is a placeholder - you'll need to adapt this to your InstallForge setup
          # Example command might look like:
          # "& 'C:\Program Files (x86)\InstallForge\ISCC.exe' setup.iss"
          echo "Create installer with InstallForge here"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-${{ matrix.architecture }}
          path: dist/

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        architecture: [x64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build application
        run: |
          poetry run python build.py --version ${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }} --tag-output --bundle-id com.basil.app

      - name: Create DMG
        run: |
          # Install create-dmg tool
          brew install create-dmg

          # Create DMG file
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          create-dmg \
            --volname "BASIL" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --app-drop-link 600 185 \
            "dist/BASIL-v$VERSION.dmg" \
            "dist/BASIL.app"

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-${{ matrix.architecture }}
          path: dist/

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'release'
        with:
          files: |
            windows-x86/*
            windows-x64/*
            macos-x64/*
            macos-arm64/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
