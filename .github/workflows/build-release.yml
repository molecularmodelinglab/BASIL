name: Build and Release (Universal Binary)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
  pull_request:
    branches: [main]

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x86, x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UPX
        run: choco install upx

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build application
        run: |
          poetry run python build.py --version ${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }} --tag-output --clean

      - name: Create Inno Setup script
        run: |
          $version = "${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}"
          $appFolder = "dist\BASIL-v$version"

          @"
          [Setup]
          AppName=BASIL
          AppVersion=$version
          AppPublisher=BASIL
          DefaultDirName={autopf}\BASIL
          DefaultGroupName=BASIL
          OutputDir=dist
          OutputBaseFilename=BASIL-setup-${{ matrix.architecture }}
          Compression=lzma2
          SolidCompression=yes
          ArchitecturesAllowed=${{ matrix.architecture == 'x64' && 'x64' || '' }}
          ArchitecturesInstallIn64BitMode=${{ matrix.architecture == 'x64' && 'x64' || '' }}

          [Files]
          Source: "$appFolder\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

          [Icons]
          Name: "{group}\BASIL"; Filename: "{app}\BASIL.exe"
          Name: "{autodesktop}\BASIL"; Filename: "{app}\BASIL.exe"; Tasks: desktopicon

          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
          "@ | Out-File -FilePath "setup.iss" -Encoding ASCII

      - name: Build Windows installer with Inno Setup
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "setup.iss"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.architecture }}
          path: dist/BASIL-setup-${{ matrix.architecture }}.exe

  build-macos-arm64:
    runs-on: macos-14  # Apple Silicon runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UPX
        run: brew install upx

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build ARM64 application
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          poetry run python build.py --version $VERSION --tag-output --clean --bundle-id com.basil.app

          # Rename to indicate architecture
          mv "dist/BASIL-v${VERSION}.app" "dist/BASIL-v${VERSION}-arm64.app"

      - name: Upload ARM64 build
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-build
          path: dist/BASIL-*-arm64.app

  build-macos-intel:
    runs-on: macos-13  # Intel runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UPX
        run: brew install upx

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build x86_64 application
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          poetry run python build.py --version $VERSION --tag-output --clean --bundle-id com.basil.app

          # Rename to indicate architecture
          mv "dist/BASIL-v${VERSION}.app" "dist/BASIL-v${VERSION}-x86_64.app"

      - name: Upload Intel build
        uses: actions/upload-artifact@v4
        with:
          name: macos-intel-build
          path: dist/BASIL-*-x86_64.app

  create-universal-binary:
    needs: [build-macos-arm64, build-macos-intel]
    runs-on: macos-14
    steps:
      - name: Download ARM64 build
        uses: actions/download-artifact@v4
        with:
          name: macos-arm64-build
          path: dist-arm64/

      - name: Download Intel build
        uses: actions/download-artifact@v4
        with:
          name: macos-intel-build
          path: dist-intel/

      - name: Create Universal Binary
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}

          # Find the app bundles
          ARM64_APP=$(find dist-arm64 -name "*.app" -type d -maxdepth 1 | head -n 1)
          INTEL_APP=$(find dist-intel -name "*.app" -type d -maxdepth 1 | head -n 1)

          echo "ARM64 app: $ARM64_APP"
          echo "Intel app: $INTEL_APP"

          # Create universal app structure by copying ARM64 as base
          # CRITICAL: Use -a to preserve symlinks
          mkdir -p dist
          cp -a "$ARM64_APP" "dist/BASIL-v${VERSION}.app"

          # List contents to debug
          echo "ARM64 MacOS contents:"
          ls -la "$ARM64_APP/Contents/MacOS/"
          echo "Intel MacOS contents:"
          ls -la "$INTEL_APP/Contents/MacOS/"

          # Get the executable name (usually it's just "BASIL")
          EXEC_NAME=$(ls "$ARM64_APP/Contents/MacOS/" | grep -v "^\\." | head -n 1)

          echo "Executable name: $EXEC_NAME"

          # Verify files exist
          if [ ! -f "$ARM64_APP/Contents/MacOS/$EXEC_NAME" ]; then
            echo "ERROR: ARM64 executable not found at $ARM64_APP/Contents/MacOS/$EXEC_NAME"
            exit 1
          fi

          if [ ! -f "$INTEL_APP/Contents/MacOS/$EXEC_NAME" ]; then
            echo "ERROR: Intel executable not found at $INTEL_APP/Contents/MacOS/$EXEC_NAME"
            exit 1
          fi

          # Create universal binary using lipo on the actual executables
          lipo -create \
            "$ARM64_APP/Contents/MacOS/$EXEC_NAME" \
            "$INTEL_APP/Contents/MacOS/$EXEC_NAME" \
            -output "dist/BASIL-v${VERSION}.app/Contents/MacOS/$EXEC_NAME"

          # Restore executable permissions (lipo creates a non-executable file)
          chmod +x "dist/BASIL-v${VERSION}.app/Contents/MacOS/$EXEC_NAME"

          # Fix Info.plist for universal binary
          PLIST_PATH="dist/BASIL-v${VERSION}.app/Contents/Info.plist"
          if [ -f "$PLIST_PATH" ]; then
            echo "Updating Info.plist for universal binary..."
            # Remove architecture-specific keys if they exist
            /usr/libexec/PlistBuddy -c "Delete :LSArchitecturePriority" "$PLIST_PATH" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Delete :LSRequiresNativeExecution" "$PLIST_PATH" 2>/dev/null || true

            # Ensure proper values
            /usr/libexec/PlistBuddy -c "Set :CFBundleExecutable $EXEC_NAME" "$PLIST_PATH" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION" "$PLIST_PATH" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $VERSION" "$PLIST_PATH" 2>/dev/null || true
          fi

          # Verify the universal binary
          echo "Universal binary info:"
          lipo -info "dist/BASIL-v${VERSION}.app/Contents/MacOS/$EXEC_NAME"

          # Verify architectures
          file "dist/BASIL-v${VERSION}.app/Contents/MacOS/$EXEC_NAME"

      - name: Remove Quarantine Attributes
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}

          APP_PATH="dist/BASIL-v${VERSION}.app"

          # Remove quarantine attributes
          echo "=== Removing quarantine attributes ==="
          xattr -cr "$APP_PATH" 2>/dev/null || true

          # Verify the universal binary
          EXEC_NAME=$(ls "$APP_PATH/Contents/MacOS/" | grep -v "^\\." | head -n 1)
          EXEC_PATH="$APP_PATH/Contents/MacOS/$EXEC_NAME"

          echo "=== Universal binary info ==="
          lipo -info "$EXEC_PATH"
          file "$EXEC_PATH"

          # Verify symlinks are preserved
          echo "=== Checking symlinks in Frameworks ==="
          ls -la "$APP_PATH/Contents/Frameworks/" | grep "^l" | head -5

      - name: Install DMG creator
        run: brew install create-dmg

      - name: Create DMG
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}

          # Create DMG directory
          mkdir -p dist/dmg
          # CRITICAL: Use -a flag to preserve symlinks and avoid duplication
          cp -a "dist/BASIL-v${VERSION}.app" dist/dmg/BASIL.app

          # Verify symlinks are preserved before DMG creation
          echo "=== Verifying symlinks before DMG creation ==="
          ls -la dist/dmg/BASIL.app/Contents/Frameworks/ | grep "^l" | head -5

          # Create DMG
          create-dmg \
            --volname "BASIL" \
            --no-internet-enable \
            "dist/BASIL-v${VERSION}-universal.dmg" \
            "dist/dmg/"

      - name: Upload macOS universal artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: dist/*.dmg

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y upx-ucl fuse libfuse2 desktop-file-utils
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build Linux application
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          poetry run python build.py --version $VERSION --tag-output --clean

      - name: Download AppImage tools
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: Create AppImage structure
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}

          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          mkdir -p AppDir/usr/share/icons/hicolor/128x128/apps

          # Copy application files
          cp -r dist/BASIL-v${VERSION}/* AppDir/usr/bin/

          # Copy icons (try different sizes/formats)
          if [ -f assets/icons/icon.png ]; then
            cp assets/icons/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/basil.png
            cp assets/icons/icon.png AppDir/basil.png
          elif [ -f assets/icons/icon.icns ]; then
            # Convert icns to png if needed (requires imagemagick)
            echo "Warning: .icns icon found, using fallback. Consider adding a .png icon."
          fi

          # Create desktop entry
          cat > AppDir/usr/share/applications/basil.desktop << EOF
          [Desktop Entry]
          Name=BASIL
          Exec=BASIL
          Icon=basil
          Type=Application
          Categories=Science;Education;
          Terminal=false
          Comment=BASIL Application
          EOF

          # Validate desktop file
          desktop-file-validate AppDir/usr/share/applications/basil.desktop || true

          # Create AppRun
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export PATH="${HERE}/usr/bin:${PATH}"
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
          exec "${HERE}/usr/bin/BASIL" "$@"
          EOF
          chmod +x AppDir/AppRun

          # Make BASIL executable
          chmod +x AppDir/usr/bin/BASIL

      - name: Build AppImage
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          ARCH=x86_64 ./appimagetool-x86_64.AppImage AppDir BASIL-v${VERSION}-x86_64.AppImage
          chmod +x BASIL-v${VERSION}-x86_64.AppImage

      - name: Verify AppImage
        run: |
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          ls -lh BASIL-v${VERSION}-x86_64.AppImage
          file BASIL-v${VERSION}-x86_64.AppImage

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64
          path: BASIL-*.AppImage

  create-release:
    needs: [build-windows, create-universal-binary, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded artifacts for debugging
        run: |
          echo "Downloaded artifacts:"
          find . -type f
          echo ""
          echo "File sizes:"
          find . -type f -exec ls -lh {} \;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-x86/*.exe
            windows-x64/*.exe
            macos-universal/*.dmg
            linux-x86_64/*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
