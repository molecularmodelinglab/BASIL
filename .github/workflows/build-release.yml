name: Build and Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x86, x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build application
        run: |
          poetry run python build.py --onefile --version ${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }} --tag-output

      - name: Install InstallForge
        run: |
          # Download and install InstallForge silently
          # Note: You may need to update the download URL to the latest version
          curl -L -o installforge.exe "https://www.installforge.net/downloads/InstallForge-setup.exe"
          Start-Process -FilePath ".\installforge.exe" -ArgumentList "/S" -Wait

      - name: Create InstallForge script
        run: |
          # Create a basic InstallForge script (.iss file)
          # This is a simplified example - you may need to customize it for your application
          echo "[Setup]" > setup.iss
          echo "AppName=BASIL" >> setup.iss
          echo "AppVersion=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}" >> setup.iss
          echo "DefaultDirName={pf}\BASIL" >> setup.iss
          echo "DefaultGroupName=BASIL" >> setup.iss
          echo "OutputDir=." >> setup.iss
          echo "OutputBaseFilename=BASIL-setup" >> setup.iss
          echo "Compression=lzma" >> setup.iss
          echo "SolidCompression=yes" >> setup.iss
          echo "" >> setup.iss
          echo "[Files]" >> setup.iss
          echo "Source: \"dist\BASIL-v${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}.exe\"; DestDir: \"{app}\"; Flags: ignoreversion" >> setup.iss
          echo "" >> setup.iss
          echo "[Icons]" >> setup.iss
          echo "Name: \"{group}\BASIL\"; Filename: \"{app}\BASIL-v${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}.exe\"" >> setup.iss
          echo "Name: \"{commondesktop}\BASIL\"; Filename: \"{app}\BASIL-v${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}.exe\"; Tasks: desktopicon" >> setup.iss
          echo "" >> setup.iss
          echo "[Tasks]" >> setup.iss
          echo "Name: \"desktopicon\"; Description: \"{cm:CreateDesktopIcon}\"; GroupDescription: \"{cm:AdditionalIcons}\"; Flags: unchecked" >> setup.iss

      - name: Build Windows installer with InstallForge
        run: |
          # Run InstallForge to create the installer
          # Adjust the path if InstallForge installs to a different location
          & "C:\Program Files (x86)\InstallForge\ISCC.exe" "setup.iss"

          # Copy the installer to dist folder for artifact upload
          Copy-Item "BASIL-setup.exe" -Destination "dist\"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-${{ matrix.architecture }}
          path: dist/

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        architecture: [x64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build application
        run: |
          poetry run python build.py --version ${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }} --tag-output --bundle-id com.basil.app

      - name: Create DMG
        run: |
          # Install create-dmg tool
          brew install create-dmg

          # Create DMG file
          VERSION=${{ github.event.inputs.version || github.event.release.tag_name || '1.0.0' }}
          create-dmg \
            --volname "BASIL" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --app-drop-link 600 185 \
            "dist/BASIL-v$VERSION.dmg" \
            "dist/BASIL.app"

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-${{ matrix.architecture }}
          path: dist/

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'release'
        with:
          files: |
            windows-x86/*
            windows-x64/*
            macos-x64/*
            macos-arm64/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
